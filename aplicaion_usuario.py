# -*- coding: utf-8 -*-
"""Aplicaion Usuario.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n_3fMGbLeg7TKHtoy4Oc6WO9KVmGxsbl

# Codigo
"""

from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Cargar el archivo CSV
file_path = '/content/drive/MyDrive/Colab Notebooks/Examen/StudentPerformanceFactors.csv'
data = pd.read_csv(file_path)

df_limpio = data.dropna()
df_limpio.columns
# Seleccionar solo las columnas numéricas para la matriz de correlación
numerical_columns = df_limpio.select_dtypes(include=['int64', 'float64']).columns

# Calcular la matriz de correlación
correlation_matrix = df_limpio[numerical_columns].corr()

# Visualizar la matriz de correlación
plt.figure(figsize=(6, 3))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Matrix for Numerical Columns')
plt.show()

# Mostrar la matriz de correlación como tabla
print(correlation_matrix)
# Variables categóricas a analizar
categorical_columns = ['Parental_Involvement', 'Access_to_Resources', 'Extracurricular_Activities',
                       'Motivation_Level', 'Internet_Access', 'Family_Income', 'Teacher_Quality',
                       'School_Type', 'Peer_Influence', 'Learning_Disabilities',
                       'Parental_Education_Level', 'Distance_from_Home', 'Gender']

# Visualizar la relación de las variables categóricas con 'Exam_Score' mediante gráficos de caja
plt.figure(figsize=(7, 21))
for i, column in enumerate(categorical_columns, 1):
    plt.subplot(7, 2, i)
    sns.boxplot(x=df_limpio[column], y=df_limpio['Exam_Score'])
    plt.title(f'Exam Score by {column}')
    plt.xticks(rotation=45)

plt.tight_layout()
plt.show()

pip install folium

import pandas as pd
import folium
from folium.plugins import HeatMap

# Leer el archivo CSV
df2 = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Examen/datos_universidades.csv')

# Crear el mapa
m = folium.Map(location=[37.0902, -95.7129], zoom_start=4)

# Añadir el HeatMap
heat_data = [[row['Latitud'], row['Longitud']] for index, row in df2.iterrows()]
HeatMap(heat_data).add_to(m)

# Guardar el mapa en un archivo HTML
#                                        m.save("mapa_calor_universidades.html")
m
df_limpio['Id'] = range(1, len(df_limpio) + 1)
nombres_hombres_df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Examen/names/male.txt', header=None)
nombres_mujeres_df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Examen/names/female.txt',header=None)
nombres_hombres_df['Id'] = range(1, len(nombres_hombres_df) + 1)
nombres_mujeres_df['Id'] = range(1, len(nombres_mujeres_df) + 1)
nombres_hombres_df.rename(columns={0: 'Nombre'}, inplace=True)
nombres_mujeres_df.rename(columns={0: 'Nombre'}, inplace=True)
df_limpio['Nombre'] = ''
df_limpio.head()
df_limpio = pd.merge(df_limpio, nombres_hombres_df[['Id', 'Nombre']], on='Id', how='left', suffixes=('', '_hombre'))
df_limpio = pd.merge(df_limpio, nombres_mujeres_df[['Id', 'Nombre']], on='Id', how='left', suffixes=('', '_mujer'))
nombres_hombres_df
df_limpio.loc[df_limpio['Gender'] == 'Male', 'Nombre'] = df_limpio['Nombre_hombre']
df_limpio.loc[df_limpio['Gender'] == 'Female', 'Nombre'] = df_limpio['Nombre_mujer']
df_limpio.head()
df_limpio.drop(columns=['Nombre_hombre', 'Nombre_mujer'], inplace=True)
df_limpio.head()
def buscar_universidades():
    print("Bienvenido al sistema de búsqueda de universidades")
    print("--------------------------------------------------")
    alumno = input("Inserte el nombre del alumnado: ")
    if alumno not in df_limpio['Nombre'].values:
        print("El alumno no se encuentra en la base de datos")
        return
    nota_alumno = df_limpio['Exam_Score'][df_limpio['Nombre'] == alumno].values[0]
    print(f"El alumno {alumno} tiene una nota de {nota_alumno}")
    buscar_unis = []
    for index, row in df2.iterrows():
        if row['Nota_corte'] <= nota_alumno:
            buscar_unis.append(row)
    if not buscar_unis:
        print("No hay universidades disponibles con la nota de corte requerida.")
        return

    mapa = folium.Map(location=[37.0902, -95.7129], zoom_start=4)
    for uni in buscar_unis:
      folium.Marker(
          location=[uni['Latitud'], uni['Longitud']],  # Asegúrate de que estas columnas existan
          popup=uni['Universidad'],
          icon=folium.Icon(color='blue')
      ).add_to(mapa)
    return mapa

"""# Aplicacion Usuario"""

buscar_universidades()